/**
* TheGamesDB API
* API Documentations
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.apis

import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.models.GamesByGameID
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.models.GamesByGameName
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.models.GamesByPlatformID
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.models.GamesImages
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.models.GamesUpdates

import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.infrastructure.ApiClient
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.infrastructure.ClientException
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.infrastructure.ClientError
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.infrastructure.ServerException
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.infrastructure.ServerError
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.infrastructure.MultiValueMap
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.infrastructure.RequestConfig
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.infrastructure.RequestMethod
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.infrastructure.ResponseType
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.infrastructure.Success

class GamesAPI(basePath: kotlin.String = "https://api.thegamesdb.net") : ApiClient(basePath) {

    /**
    * Fetch game(s) by id
    * can request additional information can be requestes through &#x60;fields&#x60; and &#x60;include&#x60; params
    * @param apikey (Required) 
    * @param id (Required) - supports &#x60;,&#x60; delimited list 
    * @param fields (Optional) - valid &#x60;,&#x60; delimited options: &#x60;players&#x60;, &#x60;publishers&#x60;, &#x60;genres&#x60;, &#x60;overview&#x60;, &#x60;last_updated&#x60;, &#x60;rating&#x60;, &#x60;platform&#x60;, &#x60;coop&#x60;, &#x60;youtube&#x60;, &#x60;os&#x60;, &#x60;processor&#x60;, &#x60;ram&#x60;, &#x60;hdd&#x60;, &#x60;video&#x60;, &#x60;sound&#x60;, &#x60;alternates&#x60; (optional)
    * @param include (Optional) - valid &#x60;,&#x60; delimited options: &#x60;boxart&#x60;, &#x60;platform&#x60; (optional)
    * @return kotlin.collections.List<GamesByGameID>
    */
    @Suppress("UNCHECKED_CAST")
    fun gamesByGameID(apikey: kotlin.String, id: kotlin.String, fields: kotlin.String?, include: kotlin.String?) : kotlin.collections.List<GamesByGameID> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("apikey" to listOf("$apikey"), "id" to listOf("$id"), "fields" to listOf("$fields"), "include" to listOf("$include"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/Games/ByGameID",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.collections.List<GamesByGameID>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.collections.List<GamesByGameID>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Fetch game(s) by name
    * can request additional information can be requestes through &#x60;fields&#x60; and &#x60;include&#x60; params
    * @param apikey (Required) 
    * @param name (Required) - Search term 
    * @param fields (Optional) - valid &#x60;,&#x60; delimited options: &#x60;players&#x60;, &#x60;publishers&#x60;, &#x60;genres&#x60;, &#x60;overview&#x60;, &#x60;last_updated&#x60;, &#x60;rating&#x60;, &#x60;platform&#x60;, &#x60;coop&#x60;, &#x60;youtube&#x60;, &#x60;os&#x60;, &#x60;processor&#x60;, &#x60;ram&#x60;, &#x60;hdd&#x60;, &#x60;video&#x60;, &#x60;sound&#x60;, &#x60;alternates&#x60; (optional)
    * @param filterLeftSquareBracketPlatformRightSquareBracket (Optional) - platform &#x60;id&#x60; can be obtain from the platforms api below, supports &#x60;,&#x60; delimited list (optional)
    * @param include (Optional) - valid &#x60;,&#x60; delimited options: &#x60;boxart&#x60;, &#x60;platform&#x60; (optional)
    * @return kotlin.collections.List<GamesByGameName>
    */
    @Suppress("UNCHECKED_CAST")
    fun gamesByGameName(apikey: kotlin.String, name: kotlin.String, fields: kotlin.String?, filterLeftSquareBracketPlatformRightSquareBracket: kotlin.String?, include: kotlin.String?) : kotlin.collections.List<GamesByGameName> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("apikey" to listOf("$apikey"), "name" to listOf("$name"), "fields" to listOf("$fields"), "filterLeftSquareBracketPlatformRightSquareBracket" to listOf("$filterLeftSquareBracketPlatformRightSquareBracket"), "include" to listOf("$include"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/Games/ByGameName",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.collections.List<GamesByGameName>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.collections.List<GamesByGameName>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Fetch game(s) by platform id
    * can request additional information can be requestes through &#x60;fields&#x60; and &#x60;include&#x60; params
    * @param apikey (Required) 
    * @param id (Required) - platform &#x60;id&#x60; can be obtain from the platforms api below, supports &#x60;,&#x60; delimited list 
    * @param fields (Optional) - valid &#x60;,&#x60; delimited options: &#x60;players&#x60;, &#x60;publishers&#x60;, &#x60;genres&#x60;, &#x60;overview&#x60;, &#x60;last_updated&#x60;, &#x60;rating&#x60;, &#x60;platform&#x60;, &#x60;coop&#x60;, &#x60;youtube&#x60;, &#x60;os&#x60;, &#x60;processor&#x60;, &#x60;ram&#x60;, &#x60;hdd&#x60;, &#x60;video&#x60;, &#x60;sound&#x60;, &#x60;alternates&#x60; (optional)
    * @param include (Optional) - valid &#x60;,&#x60; delimited options: &#x60;boxart&#x60;, &#x60;platform&#x60; (optional)
    * @return kotlin.collections.List<GamesByPlatformID>
    */
    @Suppress("UNCHECKED_CAST")
    fun gamesByPlatformID(apikey: kotlin.String, id: kotlin.String, fields: kotlin.String?, include: kotlin.String?) : kotlin.collections.List<GamesByPlatformID> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("apikey" to listOf("$apikey"), "id" to listOf("$id"), "fields" to listOf("$fields"), "include" to listOf("$include"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/Games/ByPlatformID",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.collections.List<GamesByPlatformID>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.collections.List<GamesByPlatformID>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Fetch game(s) images by game(s) id
    * results can be filtered with &#x60;filter[type]&#x60; param
    * @param apikey (Required) 
    * @param gamesId (Required) - game(s) &#x60;id&#x60; can be obtain from the above games api, supports &#x60;,&#x60; delimited list 
    * @param filterLeftSquareBracketTypeRightSquareBracket (Optional) - valid &#x60;,&#x60; delimited options: &#x60;fanart&#x60;, &#x60;banner&#x60;, &#x60;boxart&#x60;, &#x60;screenshot&#x60;, &#x60;clearlogo&#x60; (optional)
    * @return kotlin.collections.List<GamesImages>
    */
    @Suppress("UNCHECKED_CAST")
    fun gamesImages(apikey: kotlin.String, gamesId: kotlin.String, filterLeftSquareBracketTypeRightSquareBracket: kotlin.String?) : kotlin.collections.List<GamesImages> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("apikey" to listOf("$apikey"), "gamesId" to listOf("$gamesId"), "filterLeftSquareBracketTypeRightSquareBracket" to listOf("$filterLeftSquareBracketTypeRightSquareBracket"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/Games/Images",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.collections.List<GamesImages>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.collections.List<GamesImages>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Fetch games update
    * 
    * @param apikey (Required) 
    * @param lastEditId (Required) 
    * @param time (Optional) (optional)
    * @return kotlin.collections.List<GamesUpdates>
    */
    @Suppress("UNCHECKED_CAST")
    fun gamesUpdates(apikey: kotlin.String, lastEditId: kotlin.Int, time: kotlin.Int?) : kotlin.collections.List<GamesUpdates> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("apikey" to listOf("$apikey"), "lastEditId" to listOf("$lastEditId"), "time" to listOf("$time"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/Games/Updates",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.collections.List<GamesUpdates>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.collections.List<GamesUpdates>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

}
