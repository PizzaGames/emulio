/**
* TheGamesDB API
* API Documentations
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.apis

import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.models.Platforms
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.models.PlatformsByPlatformID
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.models.PlatformsByPlatformName
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.models.PlatformsImages

import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.infrastructure.ApiClient
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.infrastructure.ClientException
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.infrastructure.ClientError
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.infrastructure.ServerException
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.infrastructure.ServerError
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.infrastructure.MultiValueMap
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.infrastructure.RequestConfig
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.infrastructure.RequestMethod
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.infrastructure.ResponseType
import com.github.emulio.scrapers.thegamesdb.clientAutoGenerated.infrastructure.Success

class PlatformsAPI(basePath: kotlin.String = "https://api.thegamesdb.net") : ApiClient(basePath) {

    /**
    * Fetch platforms list
    * 
    * @param apikey (Required) 
    * @param fields (Optional) - valid &#x60;,&#x60; delimited options: &#x60;icon&#x60;, &#x60;console&#x60;, &#x60;controller&#x60;, &#x60;developer&#x60;, &#x60;manufacturer&#x60;, &#x60;media&#x60;, &#x60;cpu&#x60;, &#x60;memory&#x60;, &#x60;graphics&#x60;, &#x60;sound&#x60;, &#x60;maxcontrollers&#x60;, &#x60;display&#x60;, &#x60;overview&#x60;, &#x60;youtube&#x60; (optional)
    * @return kotlin.collections.List<Platforms>
    */
    @Suppress("UNCHECKED_CAST")
    fun platforms(apikey: kotlin.String, fields: kotlin.String?) : kotlin.collections.List<Platforms> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("apikey" to listOf("$apikey"), "fields" to listOf("$fields"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/Platforms",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.collections.List<Platforms>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.collections.List<Platforms>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Fetch platforms list by id
    * 
    * @param apikey (Required) 
    * @param id (Required) - supports &#x60;,&#x60; delimited list 
    * @param fields (Optional) - valid &#x60;,&#x60; delimited options: &#x60;icon&#x60;, &#x60;console&#x60;, &#x60;controller&#x60;, &#x60;developer&#x60;, &#x60;manufacturer&#x60;, &#x60;media&#x60;, &#x60;cpu&#x60;, &#x60;memory&#x60;, &#x60;graphics&#x60;, &#x60;sound&#x60;, &#x60;maxcontrollers&#x60;, &#x60;display&#x60;, &#x60;overview&#x60;, &#x60;youtube&#x60; (optional)
    * @return kotlin.collections.List<PlatformsByPlatformID>
    */
    @Suppress("UNCHECKED_CAST")
    fun platformsByPlatformID(apikey: kotlin.String, id: kotlin.Int, fields: kotlin.String?) : kotlin.collections.List<PlatformsByPlatformID> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("apikey" to listOf("$apikey"), "id" to listOf("$id"), "fields" to listOf("$fields"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/Platforms/ByPlatformID",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.collections.List<PlatformsByPlatformID>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.collections.List<PlatformsByPlatformID>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Fetch platforms by name
    * 
    * @param apikey (Required) 
    * @param name (Required) 
    * @param fields (Optional) - valid &#x60;,&#x60; delimited options: &#x60;icon&#x60;, &#x60;console&#x60;, &#x60;controller&#x60;, &#x60;developer&#x60;, &#x60;manufacturer&#x60;, &#x60;media&#x60;, &#x60;cpu&#x60;, &#x60;memory&#x60;, &#x60;graphics&#x60;, &#x60;sound&#x60;, &#x60;maxcontrollers&#x60;, &#x60;display&#x60;, &#x60;overview&#x60;, &#x60;youtube&#x60; (optional)
    * @return kotlin.collections.List<PlatformsByPlatformName>
    */
    @Suppress("UNCHECKED_CAST")
    fun platformsByPlatformName(apikey: kotlin.String, name: kotlin.String, fields: kotlin.String?) : kotlin.collections.List<PlatformsByPlatformName> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("apikey" to listOf("$apikey"), "name" to listOf("$name"), "fields" to listOf("$fields"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/Platforms/ByPlatformName",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.collections.List<PlatformsByPlatformName>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.collections.List<PlatformsByPlatformName>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Fetch platform(s) images by platform(s) id
    * results can be filtered with &#x60;filter[type]&#x60; param
    * @param apikey (Required) 
    * @param platformsId (Required) - platform(s) &#x60;id&#x60; can be obtain from the above platforms api, supports &#x60;,&#x60; delimited list 
    * @param filterLeftSquareBracketTypeRightSquareBracket (Optional) - valid &#x60;,&#x60; delimited options: &#x60;fanart&#x60;, &#x60;banner&#x60;, &#x60;boxart&#x60; (optional)
    * @return kotlin.collections.List<PlatformsImages>
    */
    @Suppress("UNCHECKED_CAST")
    fun platformsImages(apikey: kotlin.String, platformsId: kotlin.String, filterLeftSquareBracketTypeRightSquareBracket: kotlin.String?) : kotlin.collections.List<PlatformsImages> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("apikey" to listOf("$apikey"), "platformsId" to listOf("$platformsId"), "filterLeftSquareBracketTypeRightSquareBracket" to listOf("$filterLeftSquareBracketTypeRightSquareBracket"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/Platforms/Images",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.collections.List<PlatformsImages>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.collections.List<PlatformsImages>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

}
